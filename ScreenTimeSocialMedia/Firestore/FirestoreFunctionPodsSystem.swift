//
//  FirestoreFunctionPodsSystem.swift
//  ScreenTimeSocialMedia
//
//  Created by Andrew Kuznetsov on 10/5/23.
//

import Foundation
import FirebaseFirestore

extension FirestoreFunctions {
    // stores a "Pod" in firestore based on passed on Pod Model
    func createPod(pod: Pods) {
        let docRef = PODS_REF.addDocument(data: [
            "title": pod.title!,
            "podType": pod.podType.rawValue,
            "currentStrikes": 0,
            "totalStrikes": pod.totalStrikes!,
            "goal": pod.goal!,
            "timeframe": pod.timeframe!,
            "started": pod.started!,
            "failedDays": pod.failedDays!,
            "completedDays": pod.completedDays,
            "owner": CURRENT_USER_UID
        ]) { error in
            if let error = error {
                print("Error adding pod: \(error)")
                return
            }
        }
        
        let generatedPodID = docRef.documentID // gets podID generated by firestore
        
        // Create a document in Current user's pod collection with the pod id
        CURRENT_USER_PODS_REF.document(generatedPodID).setData([:])
        
        // Add the current user to the list of pod users
        addUserToPod(podID: generatedPodID, user: User(username: self.CURRENT_USER_USERNAME, userID: self.CURRENT_USER_UID))
    }
    func addUserToPod(podID: String, user: User) {
        // save user uid and username in pod instance document
        PODS_REF.document(podID).collection("users").document(user.uid).setData([
            "username": user.username!,
            "currentStreak": 0,
            "numStrikes": 0
        ]) { err in
            if let err = err {
                print("error adding user to pod: \(err)")
            }
        }
        
        // sets podID as document for CURRENT_USER
        CURRENT_USER_PODS_REF.document(podID).setData([:])
    }
    
    func removeUserFromPod(podID: String, user: User, completion: @escaping () -> Void) {
        // remove user instance from users collection in podID document
        PODS_REF.document(podID).collection("users").document(user.uid).delete()
        
        // removes pod instance from CURRENT_USER
        CURRENT_USER_PODS_REF.document(podID).delete()
        completion()
    }
    
    func sendPodRequest(podID: String, user: User) {
        // adds Pod info to userID's receivedPodsRequests collection
        USER_REF.document(user.uid).collection("receivedPodsRequests").document(podID).setData([
            "invitedBy": CURRENT_USER_USERNAME
        ])
        
        // adds user to sentInvites collection for podID document
        PODS_REF.document(podID).collection("sentInvites").document(user.uid).setData([
            "username": user.username!
        ])
    }
    
    
    func rejectPodRequest(podID: String, userID: String) {
        // removes userID from collection sentInvites from podID document
        PODS_REF.document(podID).collection("sentInvites").document(userID).delete()
        
        // deletes invite from CURRENT_USER_RECIEVED_PODS_REQUESTS
        CURRENT_USER_RECEIVED_PODS_REQUEST_REF.document(podID).delete()
    }
    
    func acceptPodRequest(podID: String, userID: String) {
        // removes invite instance from CURRENT_USER and userID
        rejectPodRequest(podID: podID, userID: userID)
        
        // adds CURRENT_USER to collection users for podID document and vice versa
        addUserToPod(podID: podID, user: User(username: CURRENT_USER_USERNAME, userID: CURRENT_USER_UID))
    }
    
    func beginListeningPods() {
        listenUsersPods { }
    }
    
    func listenUsersPods(completion: @escaping () -> Void) {
        CURRENT_USER_PODS_REF.addSnapshotListener { querySnapshot, error in
            guard let documents = querySnapshot?.documents else {
                print("listenUsersPods(): Error fetching documents")
                return
            }
            
            for document in documents {
                // TODO: implement calling listenPod only on change
                let podID = document.documentID
                if self.allPodsIDs.contains(where: { $0 == podID }) { continue } // doesn't "relisten to preexisting pods"
                
                self.allPodsIDs.append(document.documentID)
                
                self.listenPod(podID: document.documentID) { newPod in
                    print("newPod \(newPod)")
                    if let index = self.allPodsList.firstIndex(where: { $0.podID == newPod.podID }) {
                        self.allPodsList[index] = newPod    // so we don't add duplicate pods
                        self.currentPod = newPod
                    } else {
                        self.allPodsList.append(newPod)
                    }
                    print("!!! userPods changed the podList! \(self.allPodsList)")
                    completion()
                }
            }
        }
    }
    
    func listenPod(podID: String, completion: @escaping (Pods) -> Void) {
        PODS_REF.document(podID).addSnapshotListener { documentSnapshot, error in
            guard let document = documentSnapshot, document.exists else {
                print("listenPods(): error fetching pod document for podID: \(podID)")
                return
            }
            
            if let data = document.data(),
               let title = data["title"] as? String,
               let podType = groupType(rawValue: (data["podType"] as? String) ?? "Screen Time"),
               let currentStrikes = data["currentStrikes"] as? Int,
               let totalStrikes = data["totalStrikes"] as? Int,
               let goal = data["goal"] as? Int,
               let timeframe = data["timeframe"] as? Double,
               let started = data["started"] as? Bool,
               let failedDays = data["failedDays"] as? [Int],
               let completedDays = data["completedDays"] as? Int {
                let pod = Pods(podID: podID, title: title, podType: podType, totalStrikes: totalStrikes, currentStrikes: currentStrikes, goal: goal, timeframe: timeframe, started: started, failedDays: failedDays, completedDays: completedDays)
                print("!!! pod w/ title \(pod.title ?? "default value") changed")
                completion(pod)
            }
        }
    }
}
