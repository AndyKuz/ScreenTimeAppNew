//
//  FirestoreFunctionPodsSystem.swift
//  ScreenTimeSocialMedia
//
//  Created by Andrew Kuznetsov on 10/5/23.
//

import Foundation
import FirebaseFirestore

extension FirestoreFunctions {
    // stores a "Pod" in firestore based on passed on Pod Model
    func createPod(pod: Pods) {
        let docRef = PODS_REF.addDocument(data: [
            "title": pod.title!,
            "podType": pod.podType.rawValue,
            "currentStrikes": 0,
            "totalStrikes": pod.totalStrikes!,
            "timeframe": pod.timeframe!,
            "owner": CURRENT_USER_UID
        ]) { error in
            if let error = error {
                print("Error adding pod: \(error)")
                return
            }
        }

        let generatedPodID = docRef.documentID // gets podID generated by firestore
        
        // Create a document in Current user's pod collection with the pod id
        CURRENT_USER_PODS_REF.document(generatedPodID).setData([:])

        // Add the current user to the list of pod users
        addUserToPod(podID: generatedPodID, user: User(username: self.CURRENT_USER_USERNAME, userID: self.CURRENT_USER_UID))
    }
    func addUserToPod(podID: String, user: User) {
        // save user uid and username in pod instance document
        PODS_REF.document(podID).collection("users").document(user.uid).setData(["username": user.username!]) { err in
            if let err = err {
                print("error adding user to pod: \(err)")
            }
        }
        
        // sets podID as document for CURRENT_USER
        CURRENT_USER_PODS_REF.document(podID).setData([:])
    }
    
    func removeUserFromPod(podID: String, user: User) {
        // remove user instance from users collection in podID document
        PODS_REF.document(podID).collection("users").document(user.uid).delete()
        
        // removes pod instance from CURRENT_USER
        CURRENT_USER_PODS_REF.document(podID).delete()
    }
    
    func sendPodRequest(podID: String, user: User) {
        // adds Pod info to userID's receivedPodsRequests collection
        USER_REF.document(user.uid).collection("receivedPodsRequests").document(podID).setData([
            "invitedBy": CURRENT_USER_USERNAME
        ])
        
        // adds user to sentInvites collection for podID document
        PODS_REF.document(podID).collection("sentInvites").document(user.uid).setData([
            "username": user.username!
        ])
    }
    
    
    func rejectPodRequest(podID: String, userID: String) {
        // removes userID from collection sentInvites from podID document
        PODS_REF.document(podID).collection("sentInvites").document(userID).delete()
        
        // deletes invite from CURRENT_USER_RECIEVED_PODS_REQUESTS
        CURRENT_USER_RECEIVED_PODS_REQUEST_REF.document(podID).delete()
    }
    
    func acceptPodRequest(podID: String, userID: String) {
        // removes invite instance from CURRENT_USER and userID
        rejectPodRequest(podID: podID, userID: userID)
        
        // adds CURRENT_USER to collection users for podID document and vice versa
        addUserToPod(podID: podID, user: User(username: CURRENT_USER_USERNAME, userID: CURRENT_USER_UID))
    }
}
