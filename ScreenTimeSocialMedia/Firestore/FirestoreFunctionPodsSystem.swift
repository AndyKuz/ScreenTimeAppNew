//
//  FirestoreFunctionPodsSystem.swift
//  ScreenTimeSocialMedia
//
//  Created by Andrew Kuznetsov on 10/5/23.
//

import Foundation
import FirebaseFirestore

extension FirestoreFunctions {
    // stores a "Pod" in firestore based on passed on Pod Model
    func createPod(pod: Pods) {
        let docRef = PODS_REF.addDocument(data: [
            "title": pod.title!,
            "podType": pod.podType.rawValue,
            "currentStrikes": 0,
            "totalStrikes": pod.totalStrikes!,
            "timeframe": pod.timeframe!,
            "owner": CURRENT_USER_UID
        ]) { error in
            if let error = error {
                print("Error adding pod: \(error)")
                return
            }
        }

        let generatedPodID = docRef.documentID // gets podID generated by firestore
        
        // Update the user's podIDs list
        self.CURRENT_USER_REF.updateData(["podIDs": FieldValue.arrayUnion([generatedPodID])]) { error in
            if let error = error {
                print("Error adding pod to podIDs list for Current User: \(error)")
            }
        }

        // Add the current user to the list of pod users
        self.addUserToPod(podID: generatedPodID, user: User(username: self.CURRENT_USER_USERNAME, userID: self.CURRENT_USER_UID))
    }
    
    /*func addPodMessages(pod: Pods, message: Messages) {
        PODS_REF.document(pod.podID).collection("messages").addDocument(data:[
            "from": message.from,
            "text": message.text,
            "timeStamp": Timestamp(date: Date())
        ]) { err in
            if let _ = err {
                print("error adding message")
            } else {
                print("message added sucessfully")
            }
        }
    }*/
    
    // with a given Pod instance add a User to the instance
    func addUserToPod(podID: String, user: User) {
        // save user uid and username in pod instance document
        PODS_REF.document(podID).collection("users").document(user.uid).setData(["username": user.username!]) { err in
            if let err = err {
                print("error adding user to pod: \(err)")
            }
        }
    }
    
    func incrementStrikes(podID: String) {
        let docRef = PODS_REF.document(podID)
        
        BASE_REF.runTransaction({ (transaction, errorPointer) -> Any? in
            do {
                // Get the current value of "currentStrikes" from the document
                let documentSnapshot = try transaction.getDocument(docRef)
                if var currentStrikes = documentSnapshot.data()?["currentStrikes"] as? Int {
                    // Increment the value by 1
                    currentStrikes += 1
                    // Update the "currentStrikes" field in the document
                    transaction.updateData(["currentStrikes": currentStrikes], forDocument: docRef)
                } else {
                    // If "strikes" field doesn't exist, set it to 1
                    transaction.setData(["currentStrikes": 1], forDocument: docRef)
                }
            } catch let fetchError as NSError {
                // Handle any errors that occur during the transaction
                errorPointer?.pointee = fetchError
                return nil
            }
            return nil
        }) { (object, error) in
            if let error = error {
                print("Error updating strikes: \(error.localizedDescription)")
            } else {
                print("Strikes incremented successfully!")
            }
        }

    }
}
